/*******************************************************************************
 * include(s):
 *******************************************************************************/
#if !defined(_dhsUtil_H_)
 #include "dhsUtil.h"
#endif
#if !defined(_FITSIO_H)
 #include "fitsio.h"
#endif

#include <errno.h>

#include "pxf.h"
/*******************************************************************************
 * pxfSendPixelData ( ... )
 *******************************************************************************/ 
void pxfSendPixelData ( long *istat,     /* inherited status               */
			    char *resp,      /* response message               */
			    void *pxlAddr,   /* address of data block          */
			    size_t blkSize,  /* size of data block             */
			    fpConfig_t *cfg, /* configuration of pixel data    */
			    double *expID,   /* exposure identifier            */
			    char *obsetID    /* observation set identifier     */
    ) 
{
    /* declare some variable and initialize them */
    int fs=0;
    int bitpix=32;
    long nelms=0L;
    long naxis=2L;
    long naxes[2] = { 0L, 0L };
    fitsfile *fd = (fitsfile *)NULL;
    char *fitsDir = (char *) NULL;
    char fitsFile[DHS_MAXSTR] = {'\0'};
    struct stat sts;

    (void) memset((void *)&sts,0,sizeof(struct stat));
    (void) memset((void *)&fitsFile[0],'\0',DHS_MAXSTR);

    /* check the inherited status */
    if ( STATUS_BAD(*istat) ) return;
    MNSN_CLEAR_STR(resp,'\0');
    
    /* check input parameters */
    if ( pxlAddr==(void *)NULL || expID==(double *)NULL) {
	*istat = DHS_ERROR;
	sprintf(resp,"dhsSendPixelData: Bad parameter. %s",
			 		((expID==(double *)NULL) ? "expID ptr==NULL." : "FP config ptr == NULL."));
	strcpy(resp,"");
	return;
    }

    /* check input values */

    switch (pxfFLAG)
    {
      case 1:
	  fitsDir = ( (fitsDir=getenv("MONSOON_DATA")) == (char *) NULL ? (char *) "./"  : fitsDir );
	  if (fitsDir[strlen(fitsDir)-1] == '/') fitsDir[strlen(fitsDir)-1] ='\000';
	  (void) strncpy(pxfDIR, fitsDir, DHS_MAXSTR); pxfFLAG=3; 
	  (void) sprintf(fitsFile,"%s/%s.fits",fitsDir,pxfFILENAME);
	  break;
      case 2:
	  (void) sprintf(fitsFile,"%s/%f.fits",pxfDIR,*expID);
	  break; 
      case 3:
	  (void) sprintf(fitsFile,"%s/%s.fits",pxfDIR,pxfFILENAME);
	  break;
      case 0: default:
      {
	  fitsDir = ( (fitsDir=getenv("MONSOON_DATA")) == (char *) NULL ? (char *) "./"  : fitsDir );
	  if (fitsDir[strlen(fitsDir)-1] == '/') fitsDir[strlen(fitsDir)-1] ='\000';
	
	  (void) sprintf(fitsFile,"%s/%f.fits",fitsDir,*expID);
      }
    }

    DPRINTF(15, procDebug, "dhsSendPixelData: fitsDir=>%s<\n", pxfDIR);
    DPRINTF(15, procDebug, "dhsSendPixelData: fileName=>%s<\n", pxfFILENAME);
    DPRINTF(10, procDebug, "dhsSendPixelData: fitsFile=>%s<\n", fitsFile);

    *istat = DHS_OK;
    /* set output size */
    naxes[0] = cfg->xSize;
    naxes[1] = cfg->ySize;
    nelms = naxes[0] * naxes[1];

    /* if it doesn't exist, create it */
    if ( stat(fitsFile,&sts)==-1 && errno==ENOENT ) 
    {
	if ( fits_create_file(&fd,fitsFile,&fs) ) 
	{
	    *istat = DHS_ERROR;
	    sprintf(resp,"dhsSendPixelData:  fits container file create failed, fitsStatus = %d", fs);
	    strcpy(resp,"");
	    return;
	}
    } 
    else /* else file already exists, open it */
    {
	if ( ffopen(&fd,fitsFile,READWRITE,&fs) ) 
	{
	    *istat = DHS_ERROR;
	    sprintf(resp,"dhsSendPixelData:  fits container file open failed, fitsStatus = %d", fs);
	    strcpy(resp,"");
	    return;
	}
    }
  
    /* make it a FITS mage file */
    if ( fits_create_img(fd,bitpix,naxis,naxes,&fs) ) 
    {
	*istat = DHS_ERROR;
	sprintf(resp,"dhsSendPixelData:  fits image file create failed, fitsStatus = %d", fs);
	strcpy(resp,"");
	(void) fits_close_file(fd,&fs);
	return;
    }

    /* write data as long integers */
    if ( fits_write_img(fd,TLONG,1L,nelms,pxlAddr,&fs) ) 
    {
	*istat = DHS_ERROR;
	sprintf(resp,"dhsSendPixelData:  fits write image file failed, fitsStatus = %d", fs);
	strcpy(resp,"");
	(void) fits_close_file(fd,&fs);
	return;
    }

    fits_write_date (fd,&fs);
    fits_update_key (fd, TDOUBLE, "EXPID", expID, "dhs exposure ID", &fs);
    fits_update_key (fd, TSTRING, "OBSETID", (char *)obsetID, "Observation ID", &fs);

    /* flush and close */
    (void) ffflus(fd,&fs);
    if ( fits_close_file(fd,&fs) ) 
    {
	*istat = DHS_ERROR;
	 sprintf(resp,"dhsSendPixelData: fits close failed, fitsStatus = %d", fs);
	 strcpy(resp,"");
	return;
    }
    *istat = DHS_OK;
    /* return */
    sprintf(resp, "dhsSendPixelData: (%s) Success.", fitsFile);
    return;
}
