
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef __POSIX__
#include <sys/select.h>
#else
#include <sys/time.h>
#include <sys/types.h>
#endif
#include <unistd.h>
#include <pthread.h>
#include <sys/mman.h>
#include <stddef.h>


#include "mbus.h"

#define  DEBUG		0
#define  SELWIDTH	32


char 	*mytok();
int	pvm_handle   (int fd);
int	stdin_handle (int fd);



int main(int argc, char **argv)
{
    if (argc == 1 || strcmp (argv[1], "-s") == 0) {
	printf ("Starting as Super....\n");
	inputEventHandler ("super up");

    } else if (strcmp (argv[1], "-c") == 0) {
	printf ("Starting as Client....\n");
	inputEventHandler ("client up");

    } else {
	fprintf (stderr, "Unknown option '%s'\n", argv[1]);
	exit (1);
    }

    testListener2(); 				/* Never returns.... */
}


print_help()
{
    printf("Commands:\n");
    printf("    super [u|d]\t\tclient [u|d]\tspawn [c|s]\tstop [c|s]\n");
    printf("    init\t\thalt\t\tgetfds\tselect\n");
    printf("\n");
}


char *mytok(char *str, int N)
{
    register int i, ntok = abs(N);
    char *ip = strdup(str), buf[1024];

    if (!str) return (NULL);

    while (isspace(*ip++));			/* skip leading whitespace */

    for (i = 0; *ip && i < (N - 1); i++) { 	/* find requested token    */
	while (!isspace(*ip++));
	while (isspace(*ip++));
    }
    ip--;

    strcpy (buf, ip);				/* terminate after token   */
    for (i=0; buf[i] != '\n' && !isspace(buf[i]); i++)
	;
    buf[i] = '\0';

/*  if (ip) free (ip); */
    return ( strdup (buf) );
}



testListener()
{
    int i, n, *pvm_fds, nfds;
    int bufid, info, size;
    char buf[2048];
    fd_set fds, allset;

    char *from = NULL, *to = NULL, *host = NULL, *msg = NULL;
    int from_tid, to_tid, subject;
    int my_tid = mbAppGet(APP_TID);


    if ((nfds = pvm_getfds(&pvm_fds)) == 0) {
	fprintf(stderr, "Not connected to message bus!\n");
	return (-1);

    } else if (DEBUG) {
	printf("nfds = %d\t", nfds);
	for (i = 0; i < nfds; i++)
	    printf("fd[%d] = %d\n", i, pvm_fds[i]);
    }

    printf("Waiting for messages...\n");

    FD_ZERO(&allset);
    FD_SET(pvm_fds[0], &allset);
    FD_SET(fileno(stdin), &allset);
    while (1) {
	fds = allset;
	bzero(buf, 2048);

	if ((n = select(SELWIDTH, &fds, NULL, NULL, NULL)) > 0) {

	    if (FD_ISSET(pvm_fds[0], &fds)) {

		to_tid = subject = -1;
		if (mbusRecv(&from_tid, &to_tid, &subject, &host, &msg) <
		    0) {
		    printf("Error in mbusRecv()\n");
		}

		/* See if message was meant specifically for me.... */
		if (to_tid == my_tid && subject != MB_ERR) {
		    supHandler(from_tid, subject, msg);

		} else if (to_tid < 0) {
		    printf("BCAST:  from:%d  subj:%d msg='%s'\n",
			   from_tid, subject, msg);

		} else {
		    printf("Monitor...\n");
		    printf("   from:%d\n   to:%d\n   subj:%d\n",
			   from_tid, to_tid, subject);
		    printf("   host:'%s'\n   msg='%s'\n", host, msg);
		}



	    } else if (FD_ISSET(fileno(stdin), &fds)) {

		n = read(fileno(stdin), buf, 2048);
		buf[strlen(buf) - 1] = NULL;	/* kill newline  */
		if (DEBUG)
		    printf("stdin: n=%d  msg='%s'\n", n, buf);
		if (n <= 0 || strncmp (buf, "quit", 4) == 0)
		    break;
		else
		    inputEventHandler (buf);
	    }
	}
    }

    return (0);
}



testListener2 ()
{
    int    i, n, *pvm_fds, nfds;
    int    bufid, info, size;
    char   *from = NULL, *to = NULL, *host = NULL, *msg = NULL;
    int    from_tid, to_tid, subject;
    int    my_tid = mbAppGet(APP_TID);

    int    mb_fd, user_fd;


    if ((nfds = pvm_getfds (&pvm_fds)) == 0) {
	fprintf(stderr, "Not connected to message bus!\n");
	return (-1);

    } else {
	mb_fd = pvm_fds[0];		/* just 'cuz we know.... */
	mbusAddInputHandler (mb_fd, pvm_handle);
    }

    user_fd = fileno(stdin);
printf ("listener: stdin = %d  user_fd = %d\n", stdin, user_fd);
    mbusAddInputHandler (user_fd, stdin_handle);

    inputHandlerLoop ();
}


inputHandlerLoop ()
{
    fd_set fds, allset, mbInputSet();
    int	   i, n, nfd, fd;
    char   buf[2048];


    printf("Waiting for messages...\n");

    allset = mbInputSet ();
    nfd = mbGetNHandlers ();

    while (1) {
	fds = allset;
	bzero(buf, 2048);

	if ((n = select(SELWIDTH, &fds, NULL, NULL, NULL)) > 0) {

	    /* Loop over the handlers, call the functions where we
	     * we have data waiting.
	     */
	    for (i=0; i < nfd; i++) {
		fd = mbGetHandlerFD (i);
		if (FD_ISSET(fd, &fds)) {
		    if (DEBUG) printf ("Data on descriptor %d\n", fd);
		    mbCallHandler (i);
		}
	    }
	    
	}
    }

    return (0);
}



int
pvm_handle (int fd)
{
    char *from = NULL, *to = NULL, *host = NULL, *msg = NULL;
    int  from_tid, to_tid, subject;
    int  my_tid = mbAppGet(APP_TID);


    to_tid = subject = -1;
    if (mbusRecv(&from_tid, &to_tid, &subject, &host, &msg) < 0) {
        printf("Error in mbusRecv()\n");
	return (ERR);
    }

    /* See if message was meant specifically for me.... */
    if (to_tid == my_tid && subject != MB_ERR) {
        supHandler (from_tid, subject, msg);

    } else if (to_tid < 0) {
        printf ("BCAST:  from:%d  subj:%d msg='%s'\n", from_tid, subject, msg);

    } else {
        printf("Monitor...\n");
        printf("   from:%d\n   to:%d\n   subj:%d\n", from_tid, to_tid, subject);
        printf("   host:'%s'\n   msg='%s'\n", host, msg);
    }

    return (OK);
}


int
stdin_handle (int fd)
{
    int n;
    char buf[2048];


    n = read(fd, buf, 2048);		/* already saved fileno(stdin)	*/

    buf[strlen(buf) - 1] = NULL;	/* kill newline  		*/
    if (DEBUG)
        printf("stdin: n=%d  msg='%s'\n", n, buf);
    if (n <= 0 || strncmp (buf, "quit", 4) == 0)
        exit (0);
    else
        inputEventHandler (buf);

    return (OK);
}




/* Supervisor Message Handler
 */
supHandler(int from, int subject, char *msg)
{
    int from_tid, to_tid, subj;
    char *txt, *me = mbAppName();

    switch (subject) {
    case MB_CONNECT:
	printf("CONNECT:%s: %s\n", me, msg);
	break;
    case MB_EXITING:
	printf("DISCONNECT:%s: %s\n", me, msg);
	break;

    case MB_STATUS:
	printf("STATUS:%s: %s\n", me, msg);
	break;

    case MB_ORPHAN:
	printf("ORPHAN:%s: ", me);
	sscanf(msg, "Orphan {From: %d  To: %s  Subj: %d -- (%s)}",
	       &from_tid, &to_tid, &subj, txt);
	break;

    case MB_ERR:
	printf("ERR:%s: %s\n", me, msg);
	break;

    default:
	printf("Super recv:  ");
	printf("   from:%d  subj:%d\n   msg='%s'\n", from, subject, msg);
    }
}



inputEventHandler (char *cmd)
{
    char   c, host[64], buf[64], resp[32], val[12], config[128];
    char   cmdin[128], *tok = NULL, *group = NULL;
    char   *arg1=NULL, *arg2=NULL, *arg3=NULL;
    int    nread=0,  stid=0, ctid=0;


    /* Command loop */
    printf("zzdebug (%d)>  ", getpid());


    /*if (DEBUG) printf ("cmd entered: '%s'\n", cmd); */

    strcpy(cmdin, cmd);
    if (cmd[0] == '?') {	/* HELP    */
	print_help();

    } else if (strncmp(cmd, "init", 3) == 0) {		/* INIT    */
	printf("Initializing...");
	mbusInitialize(SUPERVISOR, NULL);
	printf("done.");

    } else if (strncmp(cmd, "super", 3) == 0) {		/* SUPER  */
	if (tok = mytok(cmd, 2)) {
	    if (tok[0] == 'u') {
		printf("Connecting as Supervisor...");
		stid = mbusConnect(SUPERVISOR, "super", TRUE);
		printf("Super:  stid = %d\n", stid);

	    } else if (tok[0] == 'd') {
		printf("Disonnecting as Supervisor...");
		mbusDisconnect(stid);

	    } else {
		printf("Invalid token '%s'....\n", tok);
	    }
	}

    } else if (strncmp(cmd, "client", 3) == 0) {	/* CLIENT  */
	if (tok = mytok(cmd, 2)) {
	    if (tok[0] == 'u') {
		printf("Connecting as Client\n");
		ctid = mbusConnect(CLIENT, "client", FALSE);
		printf("Client:   tid = %d\n", ctid);

	    } else if (tok[0] == 'd') {
		printf("Disonnecting as Client...");
		mbusDisconnect(ctid);
	    }
	}

    } else if (strncmp(cmd, "spawn", 3) == 0) {		/* SPAWN   */
	if (tok = mytok(cmd, 2)) {
	    int child = -1;

	    if (tok[0] == 's') {
		printf("Spawning new Supervisor...\n");
		mbusSpawn("zzsup", NULL, NULL, &child);
		printf("Super:   tid = %d\n", child);

	    } else if (tok[0] == 'c') {
		printf("Spawning new Client...\n");
		mbusSpawn("zzclient", NULL, NULL, &child);
		printf("Client:   tid = %d\n", child);
	    }
	}

    } else if (strncmp(cmd, "stop", 3) == 0) {		/* STOP   */
	if (tok = mytok(cmd, 2)) {
	    if (tok[0] == 's') {
		printf("Stopping Supervisor...\n");
	    } else if (tok[0] == 'c') {
		printf("Stopping Client...\n");
	    }
	}

    } else if (strncmp(cmd, "bcast", 3) == 0) {		/* BCAST  */
	if (group = mytok(cmd, 2))
	    mbusBcast (group, (arg1=mytok(cmdin,3)), MB_STATUS);

    } else if (strncmp(cmd, "send", 3) == 0) {		/* SEND   */
	if (tok = mytok(cmd, 2)) {
	    if (tok[0] == 's') {
		mbusSend(SUPERVISOR, ANY, MB_STATUS, (arg1=mytok(cmdin,3)));
	    } else if (tok[0] == 'c') {
		mbusSend(CLIENT, ANY, MB_STATUS, (arg1=mytok(cmdin,3)));
	    } else {
		printf ("Usage: send [s|c] <msg>\n");
	    }
	}



    } else if (strncmp(cmd, "whoami", 3) == 0) {	/* WHOAMI   */
	printf ("%s\n",  mbAppName());

    } else if (strncmp(cmd, "halt", 3) == 0) {		/* HALT    */
	printf("Halting message bus....\n");
	if (mbusHalt() < 0)
	    fprintf(stderr, "Error halting message bus....\n");

    } else if (strncmp(cmd, "getfds", 3) == 0) {	/* GETFDS  */
	int i, nfds, *fds;

	nfds = pvm_getfds(&fds);
	printf("nfds = %d\t", nfds);
	for (i = 0; i < nfds; i++)
	    printf("fd[%d]=%d  ", i, fds[i]);
	printf("\n");

    } else {
	printf ("unrecognized command: '%s'\n", cmd);
    }

    if (tok)   free (tok);
    if (group) free (group);
    if (arg1)  free (arg1);
    if (arg2)  free (arg2);
    if (arg3)  free (arg3);

    printf("\nzzdebug (%d)>  ", getpid());
}
